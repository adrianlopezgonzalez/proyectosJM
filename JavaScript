<!-- Archivo JavaScript.html -->
<script>
  // Variables globales
  let configData = {};
  let tasksData = [];
  let currentSortField = 'fechaEntrega';
  let currentSortDirection = 'asc';
  
  // Cargar datos iniciales al cargar la página
  document.addEventListener('DOMContentLoaded', function() {
    // Cargar usuario actual
    google.script.run
      .withSuccessHandler(function(user) {
        document.getElementById('currentUser').textContent = `Usuario: ${user}`;
      })
      .getCurrentUser();
    
    // Cargar datos de configuración
    google.script.run
      .withSuccessHandler(function(data) {
        configData = data;
        populateDropdowns();
        setupFilters();
      })
      .getConfigData();
    
    // Cargar tareas
    loadTasks();
    
    // Event listeners para los botones
    document.getElementById('btnNuevaTarea').addEventListener('click', openNewTaskModal);
    document.getElementById('btnCancelar').addEventListener('click', closeTaskModal);
    document.getElementById('taskForm').addEventListener('submit', handleTaskSubmit);
    document.getElementById('btnAddLink').addEventListener('click', openLinkModal);
    document.getElementById('btnInsertLink').addEventListener('click', insertLink);
    document.getElementById('searchInput').addEventListener('keyup', applyFilters);
    
    // Event listeners para ordenamiento
    document.querySelectorAll('.sortable').forEach(header => {
      header.addEventListener('click', function() {
        const field = this.dataset.sort;
        if (currentSortField === field) {
          currentSortDirection = currentSortDirection === 'asc' ? 'desc' : 'asc';
        } else {
          currentSortField = field;
          currentSortDirection = 'asc';
        }
        
        // Actualizar íconos de ordenamiento
        document.querySelectorAll('.sort-icon').forEach(icon => {
          icon.innerHTML = '&#8597;'; // Neutral icon
        });
        
        // Cambiar ícono según dirección
        const icon = this.querySelector('.sort-icon');
        icon.innerHTML = currentSortDirection === 'asc' ? '&#8593;' : '&#8595;';
        
        // Aplicar ordenamiento
        sortAndRenderTasks();
      });
    });
    
    // Cerrar modales con el botón X
    const closeButtons = document.getElementsByClassName('close');
    for (let i = 0; i < closeButtons.length; i++) {
      closeButtons[i].addEventListener('click', function() {
        if (this.classList.contains('link-close')) {
          closeLinkModal();
        } else {
          closeTaskModal();
        }
      });
    }
    
    // Event listeners para filtros
    document.getElementById('filterEstatus').addEventListener('change', applyFilters);
    document.getElementById('filterResponsable').addEventListener('change', applyFilters);
    document.getElementById('filterTipo').addEventListener('change', applyFilters);
  });
  
  // Configurar filtros con opciones
  function setupFilters() {
    // Estatus
    const estatusFilter = document.getElementById('filterEstatus');
    configData.estatus.forEach(function(estatus) {
      const option = document.createElement('option');
      option.value = estatus;
      option.textContent = estatus;
      estatusFilter.appendChild(option);
    });
    
    // Responsables
    const responsableFilter = document.getElementById('filterResponsable');
    configData.usuarios.forEach(function(user) {
      const option = document.createElement('option');
      option.value = user.nombre;
      option.textContent = user.nombre;
      responsableFilter.appendChild(option);
    });
    
    // Tipos
    const tipoFilter = document.getElementById('filterTipo');
    configData.tipos.forEach(function(tipo) {
      const option = document.createElement('option');
      option.value = tipo;
      option.textContent = tipo;
      tipoFilter.appendChild(option);
    });
  }
  
  // Cargar todas las tareas
  function loadTasks() {
    google.script.run
      .withSuccessHandler(function(tasks) {
        tasksData = tasks;
        sortAndRenderTasks();
      })
      .getAllTasks();
  }
  
  // Ordenar y renderizar tareas
  function sortAndRenderTasks() {
    // Clonar array para no modificar el original
    const sortedTasks = [...tasksData];
    
    // Ordenar por fecha de entrega
    sortedTasks.sort((a, b) => {
      if (currentSortField === 'fechaEntrega') {
        // Convertir fechas para comparación
        const dateA = a.fechaEntrega ? new Date(a.fechaEntrega) : new Date(9999, 11, 31);
        const dateB = b.fechaEntrega ? new Date(b.fechaEntrega) : new Date(9999, 11, 31);
        
        if (currentSortDirection === 'asc') {
          return dateA - dateB;
        } else {
          return dateB - dateA;
        }
      }
      return 0;
    });
    
    // Aplicar filtros
    applyFilters(sortedTasks);
  }
  
  // Aplicar filtros a las tareas
  function applyFilters(tasks) {
    // Si recibimos un evento, significa que fue llamado desde un event listener
    const sortedTasks = Array.isArray(tasks) ? tasks : [...tasksData];
    
    const searchText = document.getElementById('searchInput').value.toLowerCase();
    const estatusFilter = document.getElementById('filterEstatus').value;
    const responsableFilter = document.getElementById('filterResponsable').value;
    const tipoFilter = document.getElementById('filterTipo').value;
    
    // Aplicar todos los filtros
    const filteredTasks = sortedTasks.filter(task => {
      // Filtro de búsqueda textual
      const matchesSearch = !searchText || 
        (task.responsable && task.responsable.toLowerCase().includes(searchText)) ||
        (task.estatus && task.estatus.toLowerCase().includes(searchText)) ||
        (task.tipo && task.tipo.toLowerCase().includes(searchText)) ||
        (task.descripcion && task.descripcion.toLowerCase().includes(searchText)) ||
        (task.creador && task.creador.toLowerCase().includes(searchText));
      
      // Filtros de selección
      const matchesEstatus = !estatusFilter || task.estatus === estatusFilter;
      const matchesResponsable = !responsableFilter || task.responsable === responsableFilter;
      const matchesTipo = !tipoFilter || task.tipo === tipoFilter;
      
      return matchesSearch && matchesEstatus && matchesResponsable && matchesTipo;
    });
    
    // Ordenar por fecha si aplica
    if (currentSortField === 'fechaEntrega') {
      filteredTasks.sort((a, b) => {
        const dateA = a.fechaEntrega ? new Date(a.fechaEntrega) : new Date(9999, 11, 31);
        const dateB = b.fechaEntrega ? new Date(b.fechaEntrega) : new Date(9999, 11, 31);
        
        if (currentSortDirection === 'asc') {
          return dateA - dateB;
        } else {
          return dateB - dateA;
        }
      });
    }
    
    renderTasks(filteredTasks);
  }
  
  // Renderizar las tareas en la tabla
  function renderTasks(tasks) {
    const tbody = document.getElementById('tasksTableBody');
    tbody.innerHTML = '';
    
    tasks.forEach(function(task) {
      const row = document.createElement('tr');
      
      // Establecer clase de color según estatus
      if (task.estatus) {
        const statusLower = task.estatus.toLowerCase();
        if (statusLower.includes('no iniciado')) {
          row.className = 'status-no-iniciado';
        } else if (statusLower.includes('en proceso')) {
          row.className = 'status-en-proceso';
        } else if (statusLower.includes('en revisión')) {
          row.className = 'status-en-revision';
        } else if (statusLower.includes('finalizado')) {
          row.className = 'status-finalizado';
        }
      }
      
      // Calcular tiempo pendiente
      let tiempoPendiente = '';
      if (task.fechaEntrega) {
        tiempoPendiente = calculatePendingTime(task.fechaEntrega);
      }
      
      // Formatear fecha de entrega: yyyy-MM-dd a dd/MM/yyyy
      let formattedFechaEntrega = '';
      if (task.fechaEntrega) {
        const parts = task.fechaEntrega.split('-');
        formattedFechaEntrega = `${parts[2]}/${parts[1]}/${parts[0]}`;
      }
      
      // Formatear descripción para mostrar enlaces HTML
      const descripcion = task.descripcion ? task.descripcion.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" class="task-link" target="_blank">$1</a>') : '';
      
      // Extraer solo la fecha de creación (dd/mm) y usuario sin dominio
      let metadataHTML = '';
      if (task.fechaCreacion) {
        const creationDate = new Date(task.fechaCreacion);
        const day = creationDate.getDate().toString().padStart(2, '0');
        const month = (creationDate.getMonth() + 1).toString().padStart(2, '0');
        const formattedDate = `${day}/${month}`;
        
        // Extraer solo el identificador del correo del creador
        const creador = task.creador ? task.creador.split('@')[0] : '';
        
        metadataHTML = `
          <div class="task-metadata">
            <span class="metadata-item">
              <span class="metadata-icon">📅</span> ${formattedDate}
            </span>
            <span class="metadata-item">
              <span class="metadata-icon">👤</span> ${creador}
            </span>
          </div>
        `;
      }
      
      // Agregar las celdas a la fila
      const cellsHTML = `
        <td>${formattedFechaEntrega}</td>
        <td>${tiempoPendiente}</td>
        <td>${task.estatus || ''}</td>
        <td>${task.responsable || ''}</td>
        <td>${task.tipo || ''}</td>
        <td>
          <div>${descripcion}</div>
          ${metadataHTML}
        </td>
        <td>
          <button class="btn btn-edit" onclick="openEditTaskModal(${task.rowNumber})">Editar</button>
        </td>
      `;
      
      row.innerHTML = cellsHTML;
      tbody.appendChild(row);
    });
  }
  
  // Poblar los campos desplegables con datos de configuración
  function populateDropdowns() {
    // Responsables
    const responsableSelect = document.getElementById('responsable');
    responsableSelect.innerHTML = '<option value="">Seleccione un responsable</option>';
    configData.usuarios.forEach(function(user) {
      const option = document.createElement('option');
      option.value = user.nombre;
      option.textContent = user.nombre;
      responsableSelect.appendChild(option);
    });
    
    // Estatus
    const estatusSelect = document.getElementById('estatus');
    estatusSelect.innerHTML = '<option value="">Seleccione un estatus</option>';
    configData.estatus.forEach(function(estatus) {
      const option = document.createElement('option');
      option.value = estatus;
      option.textContent = estatus;
      estatusSelect.appendChild(option);
    });
    
    // Tipos
    const tipoSelect = document.getElementById('tipo');
    tipoSelect.innerHTML = '<option value="">Seleccione un tipo</option>';
    configData.tipos.forEach(function(tipo) {
      const option = document.createElement('option');
      option.value = tipo;
      option.textContent = tipo;
      tipoSelect.appendChild(option);
    });
  }
  
  // Abrir modal para nueva tarea
  function openNewTaskModal() {
    document.getElementById('modalTitle').textContent = 'Nueva Tarea';
    document.getElementById('taskForm').reset();
    document.getElementById('taskRowNumber').value = '';
    document.getElementById('taskModal').style.display = 'block';
  }
  
  // Abrir modal para editar tarea
  function openEditTaskModal(rowNumber) {
    // Buscar la tarea por número de fila
    const task = tasksData.find(t => t.rowNumber === rowNumber);
    if (!task) return;
    
    document.getElementById('modalTitle').textContent = 'Editar Tarea';
    document.getElementById('taskRowNumber').value = rowNumber;
    
    // Poblar el formulario con los datos de la tarea
    document.getElementById('fechaEntrega').value = task.fechaEntrega || '';
    document.getElementById('responsable').value = task.responsable || '';
    document.getElementById('estatus').value = task.estatus || '';
    document.getElementById('tipo').value = task.tipo || '';
    document.getElementById('descripcion').value = task.descripcion || '';
    
    // Mostrar el modal
    document.getElementById('taskModal').style.display = 'block';
  }
  
  // Cerrar modal de tarea
  function closeTaskModal() {
    document.getElementById('taskModal').style.display = 'none';
  }
  
  // Abrir modal para agregar enlaces
  function openLinkModal() {
    document.getElementById('linkUrl').value = '';
    document.getElementById('linkText').value = '';
    document.getElementById('linkModal').style.display = 'block';
  }
  
  // Cerrar modal para agregar enlaces
  function closeLinkModal() {
    document.getElementById('linkModal').style.display = 'none';
  }
  
  // Insertar enlace en el campo de descripción
  function insertLink() {
    const url = document.getElementById('linkUrl').value.trim();
    const text = document.getElementById('linkText').value.trim();
    
    if (url && text) {
      const descripcionTextarea = document.getElementById('descripcion');
      const linkMarkdown = `[${text}](${url})`;
      
      // Insertar el enlace en la posición del cursor
      const cursorPos = descripcionTextarea.selectionStart;
      const textBefore = descripcionTextarea.value.substring(0, cursorPos);
      const textAfter = descripcionTextarea.value.substring(cursorPos);
      
      descripcionTextarea.value = textBefore + linkMarkdown + textAfter;
      
      // Cerrar el modal
      closeLinkModal();
    } else {
      alert('Por favor, ingrese tanto la URL como el texto del enlace.');
    }
  }
  
  // Manejar el envío del formulario de tarea
  function handleTaskSubmit(event) {
    event.preventDefault();
    
    // Recopilar los datos del formulario
    const taskData = {
      rowNumber: document.getElementById('taskRowNumber').value,
      fechaEntrega: document.getElementById('fechaEntrega').value,
      responsable: document.getElementById('responsable').value,
      estatus: document.getElementById('estatus').value,
      tipo: document.getElementById('tipo').value,
      descripcion: document.getElementById('descripcion').value
    };
    
    // Determinar si es una nueva tarea o una edición
    if (taskData.rowNumber) {
      // Editar tarea existente
      google.script.run
        .withSuccessHandler(function(result) {
          if (result) {
            closeTaskModal();
            loadTasks();
          } else {
            alert('Error al actualizar la tarea. Por favor, inténtelo de nuevo.');
          }
        })
        .updateTask(taskData);
    } else {
      // Guardar nueva tarea
      google.script.run
        .withSuccessHandler(function(result) {
          if (result) {
            closeTaskModal();
            loadTasks();
          } else {
            alert('Error al guardar la tarea. Por favor, inténtelo de nuevo.');
          }
        })
        .saveTask(taskData);
    }
  }
  
  // Calcular tiempo pendiente
  function calculatePendingTime(deliveryDate) {
    const now = new Date();
    const delivery = new Date(deliveryDate);
    
    // Calcular diferencia en milisegundos
    const diffMs = delivery - now;
    const diffHours = diffMs / (1000 * 60 * 60);
    
    if (diffMs < 0) {
      return "Vencido";
    } else if (diffHours >= 24) {
      const diffDays = Math.floor(diffHours / 24);
      return `Faltan ${diffDays} día${diffDays !== 1 ? 's' : ''}`;
    } else {
      return `Faltan ${Math.floor(diffHours)} hora${Math.floor(diffHours) !== 1 ? 's' : ''}`;
    }
  }
  
  // Definir la función para que sea accesible desde el HTML
  window.openEditTaskModal = openEditTaskModal;
</script>
